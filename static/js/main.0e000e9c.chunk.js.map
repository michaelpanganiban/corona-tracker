{"version":3,"sources":["components/Map.js","redux/actions/action-map.js","redux/type/map.js","App.js","redux/reducers/reducer-map.js","redux/store.js","index.js"],"names":["Map","mapReducer","useSelector","state","reducerMap","dispatch","useDispatch","useState","zoom","width","height","center","viewport","setViewport","useEffect","a","fetch","then","response","json","data","type","payload","catch","err","console","log","fetchCase","cases","places","reports","months","index","month","Array","UpdatingPopover","React","forwardRef","ref","children","props","country","find","place","id","placeId","Popover","content","Title","as","name","Content","ListGroup","variant","Item","dt","d","Date","getDate","parseInt","getMonth","getFullYear","convertDate","date","infected","recovered","dead","mapboxApiAccessToken","mapStyle","onViewportChange","filter","report","hide","map","m","currentPlace","color","key","latitude","longitude","viewBox","style","cursor","fill","stroke","transform","OverlayTrigger","trigger","placement","overlay","App","initialState","action","middlewares","compose","applyMiddleware","thunk","reducers","combineReducers","createStore","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.0e000e9c.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\n\r\nimport {Popover, OverlayTrigger, ListGroup} from \"react-bootstrap\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport ReactMapGL, {Marker} from 'react-map-gl'\r\n\r\nimport { fetchCases } from \"../redux/actions/action-map\"\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\n\r\nconst Map = () => {\r\n    const mapReducer = useSelector(state => state.reducerMap)\r\n    const dispatch = useDispatch()\r\n    const [viewport, setViewport] = useState({\r\n        zoom: 1.5,\r\n        width: '100vw',\r\n        height: '100vh',\r\n        center: [0, 20]\r\n    })\r\n\r\n    const ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\r\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\r\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\r\n    const SIZE = 16;\r\n\r\n    useEffect(()=>{\r\n        const fetchCase = async () => {\r\n            await fetch(\"data.json\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                dispatch(fetchCases(data))\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        }\r\n        fetchCase()\r\n    },[])\r\n    const {places, reports} = mapReducer.cases\r\n\r\n    const convertDate = (dt) =>{\r\n        let d = new Date(dt)\r\n        return d.getDate() +' '+ months(parseInt(d.getMonth())) + ' ' + d.getFullYear()\r\n    }\r\n    const months = (index) => {\r\n        let month = new Array();\r\n        month[0] = \"January\";\r\n        month[1] = \"February\";\r\n        month[2] = \"March\";\r\n        month[3] = \"April\";\r\n        month[4] = \"May\";\r\n        month[5] = \"June\";\r\n        month[6] = \"July\";\r\n        month[7] = \"August\";\r\n        month[8] = \"September\";\r\n        month[9] = \"October\";\r\n        month[10] = \"November\";\r\n        month[11] = \"December\";\r\n\r\n        return month[index];\r\n    }\r\n   \r\n    const UpdatingPopover = React.forwardRef(\r\n        ({children,  ...props }, ref) => {\r\n            const country = places.find(place => place.id === children.placeId)\r\n            return (\r\n                <Popover id=\"popover-contained\" ref={ref} content {...props}>\r\n                    <Popover.Title as=\"h3\">{country.name} | {country.country}</Popover.Title>\r\n                    <Popover.Content>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item><b>Date:</b> {convertDate(children.date)}</ListGroup.Item>\r\n                        <ListGroup.Item><b>Infected:</b> {(children.infected)? children.infected: 0}</ListGroup.Item>\r\n                        <ListGroup.Item><b>Recovered:</b> {(children.recovered)? children.recovered: 0}</ListGroup.Item>\r\n                        <ListGroup.Item><b>Dead:</b> {(children.dead)? children.dead: 0}</ListGroup.Item>\r\n                    </ListGroup>\r\n                    </Popover.Content>\r\n                </Popover>\r\n            );\r\n        },\r\n    )\r\n    \r\n    return (\r\n            <div>\r\n                {/* <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\r\n                    <Button variant=\"success\">Click me to see</Button>\r\n                </OverlayTrigger> */}\r\n                <ReactMapGL\r\n                    {...viewport}\r\n                    mapboxApiAccessToken = {'pk.eyJ1IjoibWlrZWxpY2lvdXMiLCJhIjoiY2tiMGJlZngwMDY4cDJ6bXV3dWF0cjJwcCJ9.zw69qwm7_FCWvLfmHfEAqw'}\r\n                    mapStyle=\"mapbox://styles/mapbox/dark-v10\"\r\n                    onViewportChange = {(viewport) => setViewport(viewport)}\r\n                >\r\n                    {\r\n                        reports && reports.filter(report => !report.hide).map(m => {\r\n                            const currentPlace = places.find(place => place.id === m.placeId)\r\n                            let color = ''\r\n                            if(m.infected < 10)\r\n                                color = 'grey'\r\n                            else if(m.infected > 10 && m.infected < 100)\r\n                                color = 'blue'\r\n                            else\r\n                                color = 'red' \r\n                            return (\r\n                                \r\n                                  <Marker     \r\n                                      key = {m.id}\r\n                                      latitude={currentPlace.latitude}\r\n                                      longitude={currentPlace.longitude}\r\n                                  >\r\n                                    <svg\r\n                                        height={SIZE}\r\n                                        viewBox=\"0 0 24 24\"\r\n                                        style={{\r\n                                            cursor: 'pointer',\r\n                                            fill: `${color}`,\r\n                                            stroke: 'white',\r\n                                            transform: `translate(${-SIZE / 2}px,${-SIZE}px)`\r\n                                        }}\r\n                                    >\r\n                                        <OverlayTrigger trigger=\"click\" placement=\"right\" overlay = {<UpdatingPopover id=\"popover-contained\">{m}</UpdatingPopover>}>\r\n                                          <path d={ICON} />\r\n                                        </OverlayTrigger>\r\n                                    </svg>\r\n                                  </Marker>\r\n                            )\r\n                        })\r\n                    }\r\n                </ReactMapGL>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import {FETCH_CASES} from '../type/map'\r\n\r\nexport function fetchCases(payload){\r\n    return {\r\n        type: FETCH_CASES,\r\n        payload\r\n    }\r\n}","export const FETCH_CASES = 'FETCH_CASES'\r\nexport const FETCH_COUNTRIES = 'FETCH_COUNTRIES'","import React from 'react';\nimport Map from './components/Map'\n\nfunction App() {\n  return (\n    <div>\n      <Map/>\n    </div>\n  );\n}\nexport default App;\n","import {FETCH_CASES} from '../type/map'\r\n\r\nconst initialState = {\r\n    cases: {},\r\n}\r\n\r\nconst reducerMap = ( state = initialState, action ) => {\r\n    switch(action.type){\r\n                case FETCH_CASES:\r\n                    return {\r\n                        ...state,\r\n                        cases: {\r\n                            ...state.cases,\r\n                            ...action.payload\r\n                        }\r\n                    }\r\n                break\r\n                default:\r\n                    return state\r\n            }\r\n}\r\n\r\nexport default reducerMap","import { createStore, applyMiddleware, compose, combineReducers  } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\n// reducers\r\nimport reducerMap from './reducers/reducer-map'\r\n\r\n\r\nconst middlewares = compose(applyMiddleware(thunk))\r\n\r\nconst reducers = combineReducers({\r\n    reducerMap\r\n})\r\n\r\nexport default createStore(reducers, middlewares)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n    <Provider store = {store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}